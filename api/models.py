# Autogenerated file, do not edit manually! Run generate_model.sh to update instead
# coding: utf-8
from sqlalchemy import Boolean, Column, Float, ForeignKey, Index, Integer, Numeric, String, Table, Text
from sqlalchemy.schema import FetchedValue
from sqlalchemy.orm import relationship
from flask_sqlalchemy import SQLAlchemy


db = SQLAlchemy()


class AsDomain(db.Model):
    __tablename__ = 'as_domains'
    __table_args__ = {u'schema': 'antismash'}

    as_domain_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text)
    database = db.Column(db.Text)
    detection = db.Column(db.Text)
    score = db.Column(db.Float(53))
    evalue = db.Column(db.Float(53))
    translation = db.Column(db.Text)
    pks_signature = db.Column(db.Text)
    minowa = db.Column(db.Text)
    nrps_predictor = db.Column(db.Text)
    stachelhaus = db.Column(db.Text)
    consensus = db.Column(db.Text)
    kr_activity = db.Column(db.Boolean)
    kr_stereochemistry = db.Column(db.Text)
    locus_id = db.Column(db.ForeignKey(u'antismash.loci.locus_id', ondelete=u'CASCADE'), index=True)
    gene_id = db.Column(db.ForeignKey(u'antismash.genes.gene_id', ondelete=u'CASCADE'), index=True)

    gene = db.relationship(u'Gene', primaryjoin='AsDomain.gene_id == Gene.gene_id', backref=u'as_domains')
    locus = db.relationship(u'Locus', primaryjoin='AsDomain.locus_id == Locus.locus_id', backref=u'as_domains')


class BgcRule(db.Model):
    __tablename__ = 'bgc_rules'
    __table_args__ = {u'schema': 'antismash'}

    bgc_rule_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    rule = db.Column(db.Text)
    bgc_type_id = db.Column(db.ForeignKey(u'antismash.bgc_types.bgc_type_id'))

    bgc_type = db.relationship(u'BgcType', primaryjoin='BgcRule.bgc_type_id == BgcType.bgc_type_id', backref=u'bgc_rules')


class BgcType(db.Model):
    __tablename__ = 'bgc_types'
    __table_args__ = {u'schema': 'antismash'}

    bgc_type_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    term = db.Column(db.Text, unique=True)
    description = db.Column(db.Text)
    parent_id = db.Column(db.ForeignKey(u'antismash.bgc_types.bgc_type_id'))

    parent = db.relationship(u'BgcType', remote_side=[bgc_type_id], primaryjoin='BgcType.parent_id == BgcType.bgc_type_id', backref=u'bgc_types')


class BiosyntheticGeneCluster(db.Model):
    __tablename__ = 'biosynthetic_gene_clusters'
    __table_args__ = {u'schema': 'antismash'}

    bgc_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    cluster_number = db.Column(db.Integer)
    locus_id = db.Column(db.ForeignKey(u'antismash.loci.locus_id', ondelete=u'CASCADE'), index=True)
    evidence_id = db.Column(db.ForeignKey(u'antismash.evidences.evidence_id'))

    evidence = db.relationship(u'Evidence', primaryjoin='BiosyntheticGeneCluster.evidence_id == Evidence.evidence_id', backref=u'biosynthetic_gene_clusters')
    locus = db.relationship(u'Locus', primaryjoin='BiosyntheticGeneCluster.locus_id == Locus.locus_id', backref=u'biosynthetic_gene_clusters')
    compounds = db.relationship(u'Compound', secondary=u'antismash.rel_clusters_compounds', backref=u'biosynthetic_gene_clusters')
    bgc_types = db.relationship(u'BgcType', secondary=u'antismash.rel_clusters_types', backref=u'biosynthetic_gene_clusters')


class ClusterblastAlgorithm(db.Model):
    __tablename__ = 'clusterblast_algorithms'
    __table_args__ = {u'schema': 'antismash'}

    algorithm_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text)


class ClusterblastHit(db.Model):
    __tablename__ = 'clusterblast_hits'
    __table_args__ = (
        db.Index('clusterblast_hits_bgc_id_rank_algorithm_id_idx', 'bgc_id', 'rank', 'algorithm_id'),
        {u'schema': 'antismash'}
    )

    clusterblast_hit_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    rank = db.Column(db.Integer)
    acc = db.Column(db.Text)
    description = db.Column(db.Text)
    similarity = db.Column(db.Integer)
    algorithm_id = db.Column(db.ForeignKey(u'antismash.clusterblast_algorithms.algorithm_id'))
    bgc_id = db.Column(db.ForeignKey(u'antismash.biosynthetic_gene_clusters.bgc_id', ondelete=u'CASCADE'))

    algorithm = db.relationship(u'ClusterblastAlgorithm', primaryjoin='ClusterblastHit.algorithm_id == ClusterblastAlgorithm.algorithm_id', backref=u'clusterblast_hits')
    bgc = db.relationship(u'BiosyntheticGeneCluster', primaryjoin='ClusterblastHit.bgc_id == BiosyntheticGeneCluster.bgc_id', backref=u'clusterblast_hits')


class Compound(db.Model):
    __tablename__ = 'compounds'
    __table_args__ = {u'schema': 'antismash'}

    compound_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    smile_structure = db.Column(db.Text)
    peptide_sequence = db.Column(db.Text, index=True)
    molecular_weight = db.Column(db.Float)
    monoisotopic_mass = db.Column(db.Float)
    alternative_weights = db.Column(db.Text)
    bridges = db.Column(db.Integer)
    _class = db.Column('class', db.Text)
    score = db.Column(db.Float(53))


class DnaSequence(db.Model):
    __tablename__ = 'dna_sequences'
    __table_args__ = {u'schema': 'antismash'}

    sequence_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    dna = db.Column(db.Text)
    md5 = db.Column(db.Text)
    acc = db.Column(db.Text)
    contig_type = db.Column(db.Integer)
    chromosome_type = db.Column(db.Integer)
    version = db.Column(db.Integer)
    genome_id = db.Column(db.ForeignKey(u'antismash.genomes.genome_id', ondelete=u'CASCADE'))

    genome = db.relationship(u'Genome', primaryjoin='DnaSequence.genome_id == Genome.genome_id', backref=u'dna_sequences')


class Evidence(db.Model):
    __tablename__ = 'evidences'
    __table_args__ = {u'schema': 'antismash'}

    evidence_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text, unique=True)
    description = db.Column(db.Text)


class FunctionalClass(db.Model):
    __tablename__ = 'functional_classes'
    __table_args__ = {u'schema': 'antismash'}

    functional_class_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text)
    parent_id = db.Column(db.ForeignKey(u'antismash.functional_classes.functional_class_id'))

    parent = db.relationship(u'FunctionalClass', remote_side=[functional_class_id], primaryjoin='FunctionalClass.parent_id == FunctionalClass.functional_class_id', backref=u'functional_classes')


t_gene_cluster_map = db.Table(
    'gene_cluster_map',
    db.Column('sequence_id', db.Integer),
    db.Column('bgc_id', db.Integer),
    db.Column('gene_id', db.Integer),
    schema='antismash'
)


class Gene(db.Model):
    __tablename__ = 'genes'
    __table_args__ = {u'schema': 'antismash'}

    gene_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    functional_class_id = db.Column(db.ForeignKey(u'antismash.functional_classes.functional_class_id'))
    evidence_id = db.Column(db.ForeignKey(u'antismash.evidences.evidence_id'))
    locus_tag = db.Column(db.Text, index=True)
    name = db.Column(db.Text)
    product = db.Column(db.Text)
    protein_id = db.Column(db.Text)
    translation = db.Column(db.Text)
    locus_id = db.Column(db.ForeignKey(u'antismash.loci.locus_id', ondelete=u'CASCADE'), index=True)
    operon_id = db.Column(db.ForeignKey(u'antismash.operons.operon_id'))

    evidence = db.relationship(u'Evidence', primaryjoin='Gene.evidence_id == Evidence.evidence_id', backref=u'genes')
    functional_class = db.relationship(u'FunctionalClass', primaryjoin='Gene.functional_class_id == FunctionalClass.functional_class_id', backref=u'genes')
    locus = db.relationship(u'Locus', primaryjoin='Gene.locus_id == Locus.locus_id', backref=u'genes')
    operon = db.relationship(u'Operon', primaryjoin='Gene.operon_id == Operon.operon_id', backref=u'genes')


class Genome(db.Model):
    __tablename__ = 'genomes'
    __table_args__ = {u'schema': 'antismash'}

    genome_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    tax_id = db.Column(db.ForeignKey(u'antismash.taxa.tax_id', ondelete=u'CASCADE'))
    bio_project = db.Column(db.Text)
    bio_sample = db.Column(db.Text)
    isolate_id = db.Column(db.ForeignKey(u'antismash.isolates.isolate_id', ondelete=u'CASCADE'))

    isolate = db.relationship(u'Isolate', primaryjoin='Genome.isolate_id == Isolate.isolate_id', backref=u'genomes')
    tax = db.relationship(u'Taxa', primaryjoin='Genome.tax_id == Taxa.tax_id', backref=u'genomes')


class Isolate(db.Model):
    __tablename__ = 'isolates'
    __table_args__ = {u'schema': 'antismash'}

    isolate_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    sample_id = db.Column(db.ForeignKey(u'antismash.samples.sample_id'))

    sample = db.relationship(u'Sample', primaryjoin='Isolate.sample_id == Sample.sample_id', backref=u'isolates')


class Locus(db.Model):
    __tablename__ = 'loci'
    __table_args__ = (
        db.Index('loci_start_end_strand_idx', 'start_pos', 'end_pos', 'strand'),
        {u'schema': 'antismash'}
    )

    locus_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    start_pos = db.Column(db.Integer)
    end_pos = db.Column(db.Integer)
    strand = db.Column(db.String(1))
    sequence_id = db.Column(db.ForeignKey(u'antismash.dna_sequences.sequence_id', ondelete=u'CASCADE'))

    sequence = db.relationship(u'DnaSequence', primaryjoin='Locus.sequence_id == DnaSequence.sequence_id', backref=u'loci')


class Monomer(db.Model):
    __tablename__ = 'monomers'
    __table_args__ = {u'schema': 'antismash'}

    monomer_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text, unique=True)
    description = db.Column(db.Text)
    smile = db.Column(db.Text)
    three_letter_code = db.Column(db.String(3))
    single_letter_code = db.Column(db.String(1))


class Operon(db.Model):
    __tablename__ = 'operons'
    __table_args__ = {u'schema': 'antismash'}

    operon_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    label = db.Column(db.Text)
    evidence_id = db.Column(db.ForeignKey(u'antismash.evidences.evidence_id'))
    locus_id = db.Column(db.ForeignKey(u'antismash.loci.locus_id', ondelete=u'CASCADE'))

    evidence = db.relationship(u'Evidence', primaryjoin='Operon.evidence_id == Evidence.evidence_id', backref=u'operons')
    locus = db.relationship(u'Locus', primaryjoin='Operon.locus_id == Locus.locus_id', backref=u'operons')


class ProfileHit(db.Model):
    __tablename__ = 'profile_hits'
    __table_args__ = {u'schema': 'antismash'}

    profile_hit_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    gene_id = db.Column(db.ForeignKey(u'antismash.genes.gene_id', ondelete=u'CASCADE'), index=True)
    name = db.Column(db.ForeignKey(u'antismash.profiles.name'))
    evalue = db.Column(db.Float(53))
    bitscore = db.Column(db.Float(53))
    seeds = db.Column(db.Integer)

    gene = db.relationship(u'Gene', primaryjoin='ProfileHit.gene_id == Gene.gene_id', backref=u'profile_hits')
    profile = db.relationship(u'Profile', primaryjoin='ProfileHit.name == Profile.name', backref=u'profile_hits')


class Profile(db.Model):
    __tablename__ = 'profiles'
    __table_args__ = {u'schema': 'antismash'}

    name = db.Column(db.Text, primary_key=True)
    description = db.Column(db.Text)
    cutoff = db.Column(db.Integer)
    filename = db.Column(db.Text)


class RelAsDomainsMonomer(db.Model):
    __tablename__ = 'rel_as_domains_monomers'
    __table_args__ = {u'schema': 'antismash'}

    as_domain_id = db.Column(db.ForeignKey(u'antismash.as_domains.as_domain_id', ondelete=u'CASCADE'), primary_key=True, nullable=False)
    monomer_id = db.Column(db.ForeignKey(u'antismash.monomers.monomer_id'), primary_key=True, nullable=False)
    position_in_domain = db.Column(db.Integer)

    as_domain = db.relationship(u'AsDomain', primaryjoin='RelAsDomainsMonomer.as_domain_id == AsDomain.as_domain_id', backref=u'rel_as_domains_monomers')
    monomer = db.relationship(u'Monomer', primaryjoin='RelAsDomainsMonomer.monomer_id == Monomer.monomer_id', backref=u'rel_as_domains_monomers')


t_rel_clusters_compounds = db.Table(
    'rel_clusters_compounds',
    db.Column('bgc_id', db.ForeignKey(u'antismash.biosynthetic_gene_clusters.bgc_id', ondelete=u'CASCADE'), primary_key=True, nullable=False),
    db.Column('compound_id', db.ForeignKey(u'antismash.compounds.compound_id'), primary_key=True, nullable=False),
    schema='antismash'
)


t_rel_clusters_types = db.Table(
    'rel_clusters_types',
    db.Column('bgc_id', db.ForeignKey(u'antismash.biosynthetic_gene_clusters.bgc_id', ondelete=u'CASCADE'), primary_key=True, nullable=False),
    db.Column('bgc_type_id', db.ForeignKey(u'antismash.bgc_types.bgc_type_id'), primary_key=True, nullable=False),
    schema='antismash'
)


class RelCompoundsMonomer(db.Model):
    __tablename__ = 'rel_compounds_monomers'
    __table_args__ = {u'schema': 'antismash'}

    compound_id = db.Column(db.ForeignKey(u'antismash.compounds.compound_id'), primary_key=True, nullable=False)
    monomer_id = db.Column(db.ForeignKey(u'antismash.monomers.monomer_id'), primary_key=True, nullable=False)
    position = db.Column(db.Integer, primary_key=True, nullable=False)

    compound = db.relationship(u'Compound', primaryjoin='RelCompoundsMonomer.compound_id == Compound.compound_id', backref=u'rel_compounds_monomers')
    monomer = db.relationship(u'Monomer', primaryjoin='RelCompoundsMonomer.monomer_id == Monomer.monomer_id', backref=u'rel_compounds_monomers')


class Sample(db.Model):
    __tablename__ = 'samples'
    __table_args__ = {u'schema': 'antismash'}

    sample_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    habitat = db.Column(db.Text)
    time = db.Column(db.Text)
    site_id = db.Column(db.ForeignKey(u'antismash.sampling_sites.site_id'))

    site = db.relationship(u'SamplingSite', primaryjoin='Sample.site_id == SamplingSite.site_id', backref=u'samples')


class SamplingSite(db.Model):
    __tablename__ = 'sampling_sites'
    __table_args__ = {u'schema': 'antismash'}

    site_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


t_sequence_gc_content = db.Table(
    'sequence_gc_content',
    db.Column('sequence_id', db.Integer),
    db.Column('gc_content', db.Numeric),
    schema='antismash'
)


class SmcogHit(db.Model):
    __tablename__ = 'smcog_hits'
    __table_args__ = {u'schema': 'antismash'}

    smcog_id = db.Column(db.ForeignKey(u'antismash.smcogs.smcog_id'), primary_key=True, nullable=False)
    gene_id = db.Column(db.ForeignKey(u'antismash.genes.gene_id', ondelete=u'CASCADE'), primary_key=True, nullable=False, index=True)
    score = db.Column(db.Float(53))
    evalue = db.Column(db.Float(53))
    image_path = db.Column(db.Text)

    gene = db.relationship(u'Gene', primaryjoin='SmcogHit.gene_id == Gene.gene_id', backref=u'smcog_hits')
    smcog = db.relationship(u'Smcog', primaryjoin='SmcogHit.smcog_id == Smcog.smcog_id', backref=u'smcog_hits')


class Smcog(db.Model):
    __tablename__ = 'smcogs'
    __table_args__ = {u'schema': 'antismash'}

    smcog_id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    name = db.Column(db.Text)
    description = db.Column(db.Text)
    functional_class_id = db.Column(db.ForeignKey(u'antismash.functional_classes.functional_class_id'))

    functional_class = db.relationship(u'FunctionalClass', primaryjoin='Smcog.functional_class_id == FunctionalClass.functional_class_id', backref=u'smcogs')


class Taxa(db.Model):
    __tablename__ = 'taxa'
    __table_args__ = {u'schema': 'antismash'}

    tax_id = db.Column(db.Integer, primary_key=True)
    superkingdom = db.Column(db.Text)
    phylum = db.Column(db.Text)
    _class = db.Column('class', db.Text)
    taxonomic_order = db.Column(db.Text)
    family = db.Column(db.Text)
    genus = db.Column(db.Text)
    species = db.Column(db.Text)
    strain = db.Column(db.Text)
